---
title: "Untitled"
output: 
  flexdashboard::flex_dashboard:
    orientation: row
  runtime: shiny
---

```{r setup, include=FALSE}
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(viridis)
library(plotly)
library(readr)
library(dplyr)
library(tidytext)
```

```{r}
### load data
nyc_inspections <- read_csv("./data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz", 
                           col_types = cols(building = col_character()),
                           na = c("NA", "N/A")) %>% 
  filter(grade %in% c("A", "B", "C"),
         boro != "Missing") %>% 
  mutate(boro = str_to_title(boro),
         inspection_num = row_number()) %>%
  select(inspection_num, boro, grade, score, critical_flag, dba, cuisine_description, zipcode, violation_description)
```


Column {.sidebar}
-----------------------------------------------------------------------

```{r}
type <- nyc_inspections %>% 
  distinct(cuisine_description) %>% 
  pull()

# selectInput widget

selectInput("cuisine_type", label = h3("Select cuisine type"),
            choices = type, selected = "American")
```


Row
-----------------------------------------------------------------------

### Chart A

```{r}

inspection_words = nyc_inspections %>% 
  unnest_tokens(word, violation_description)

data(stop_words)

inspection_words = 
  anti_join(inspection_words, stop_words)

renderPlotly({
inspection_words %>% 
    filter(cuisine_description == input$cuisine_type) %>% 
  count(word, sort = TRUE) %>% 
  top_n(10) %>% 
  mutate(word = fct_reorder(word, n)) %>% 
  plot_ly(x = ~word, y = ~n, type = "bar", color = ~word)
    
})
```

Row {.tabset .tabset-fade}
-----------------------------------------------------------------------

### Chart B

```{r}

```

### Chart C

```{r}

```

